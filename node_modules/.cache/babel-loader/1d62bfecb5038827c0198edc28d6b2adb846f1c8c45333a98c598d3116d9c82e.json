{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIKueZAYD5KDThyStciscQhD4k7kkpXaQ\",\n  authDomain: \"crwn-andres-clothing.firebaseapp.com\",\n  projectId: \"crwn-andres-clothing\",\n  storageBucket: \"crwn-andres-clothing.appspot.com\",\n  messagingSenderId: \"250131470200\",\n  appId: \"1:250131470200:web:4d897f4da6270c9640da8d\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot.exists());\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    createdAt = new Date();\n  }\n  try {\n    await setDoc(userDocRef, {\n      displayName,\n      email,\n      createdAt\n    });\n  } catch (error) {\n    console.log(\"error creating the user\", error);\n  }\n\n  // if user data exists\n  // create / set the document with data from userAuth in my collection\n\n  // if user data does not exist\n\n  // return userDocRf\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error"],"sources":["C:/Projects/ReactJs/CompleteReactDev/crwn-andres-clothing/src/utils/firebase/firebase.utils.jsx"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  signInWithRedirect,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n} from \"firebase/auth\";\r\n\r\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDIKueZAYD5KDThyStciscQhD4k7kkpXaQ\",\r\n  authDomain: \"crwn-andres-clothing.firebaseapp.com\",\r\n  projectId: \"crwn-andres-clothing\",\r\n  storageBucket: \"crwn-andres-clothing.appspot.com\",\r\n  messagingSenderId: \"250131470200\",\r\n  appId: \"1:250131470200:web:4d897f4da6270c9640da8d\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\",\r\n});\r\n\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth) => {\r\n  const userDocRef = doc(db, \"users\", userAuth.uid);\r\n\r\n  console.log(userDocRef);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n  console.log(userSnapshot.exists());\r\n\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    createdAt = new Date();\r\n  }\r\n\r\n  try {\r\n    await setDoc(userDocRef, {\r\n      displayName,\r\n      email,\r\n      createdAt,\r\n    });\r\n  } catch (error) {\r\n    console.log(\"error creating the user\", error);\r\n  }\r\n\r\n  // if user data exists\r\n  // create / set the document with data from userAuth in my collection\r\n\r\n  // if user data does not exist\r\n\r\n  // return userDocRf\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,QACb,eAAe;AAEtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtE;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,sCAAsC;EAClDC,SAAS,EAAE,sBAAsB;EACjCC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAIb,kBAAkB,EAAE;AAEzCa,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGnB,OAAO,EAAE;AAC7B,OAAO,MAAMoB,qBAAqB,GAAGA,CAAA,KAAMlB,eAAe,CAACiB,IAAI,EAAEH,QAAQ,CAAC;AAE1E,OAAO,MAAMK,EAAE,GAAGjB,YAAY,EAAE;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EACvB,MAAMI,YAAY,GAAG,MAAMtB,MAAM,CAACkB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,EAAE,CAAC;EAElC,IAAI,CAACD,YAAY,CAACC,MAAM,EAAE,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGR,QAAQ;IACvCS,SAAS,GAAG,IAAIC,IAAI,EAAE;EACxB;EAEA,IAAI;IACF,MAAM1B,MAAM,CAACiB,UAAU,EAAE;MACvBM,WAAW;MACXC,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAAC;EAC/C;;EAEA;EACA;;EAEA;;EAEA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}