{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDIKueZAYD5KDThyStciscQhD4k7kkpXaQ',\n  authDomain: 'crwn-andres-clothing.firebaseapp.com',\n  projectId: 'crwn-andres-clothing',\n  storageBucket: 'crwn-andres-clothing.appspot.com',\n  messagingSenderId: '250131470200',\n  appId: '1:250131470200:web:4d897f4da6270c9640da8d'\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let addiTionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  //   console.log(userSnapshot.exists());\n\n  // if user data does not exist\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    // create / set the document with data from userAuth in my collection\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...addiTionalInformation\n      });\n    } catch (error) {\n      //   console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  // if user data exists\n  return userDocRef;\n\n  // return userDocRf\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthhEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","addiTionalInformation","arguments","length","undefined","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","createAuthUserWithEmailAndPassword","password","signInAuthhEmailAndPassword"],"sources":["C:/Projects/ReactJs/CompleteReactDev/crwn-andres-clothing/src/utils/firebase/firebase.utils.jsx"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport {\r\n  getAuth,\r\n  signInWithRedirect,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from 'firebase/auth';\r\n\r\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyDIKueZAYD5KDThyStciscQhD4k7kkpXaQ',\r\n  authDomain: 'crwn-andres-clothing.firebaseapp.com',\r\n  projectId: 'crwn-andres-clothing',\r\n  storageBucket: 'crwn-andres-clothing.appspot.com',\r\n  messagingSenderId: '250131470200',\r\n  appId: '1:250131470200:web:4d897f4da6270c9640da8d',\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\ngoogleProvider.setCustomParameters({\r\n  prompt: 'select_account',\r\n});\r\n\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = () =>\r\n  signInWithPopup(auth, googleProvider);\r\nexport const signInWithGoogleRedirect = () =>\r\n  signInWithRedirect(auth, googleProvider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (\r\n  userAuth,\r\n  addiTionalInformation = {}\r\n) => {\r\n  if (!userAuth) return;\r\n\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n\r\n  console.log(userDocRef);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n  //   console.log(userSnapshot.exists());\r\n\r\n  // if user data does not exist\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    // create / set the document with data from userAuth in my collection\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...addiTionalInformation,\r\n      });\r\n    } catch (error) {\r\n      //   console.log(\"error creating the user\", error.message);\r\n    }\r\n  }\r\n\r\n  // if user data exists\r\n  return userDocRef;\r\n\r\n  // return userDocRf\r\n};\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signInAuthhEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,EAC9BC,0BAA0B,QACrB,eAAe;AAEtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtE;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,sCAAsC;EAClDC,SAAS,EAAE,sBAAsB;EACjCC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGlB,aAAa,CAACW,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAIf,kBAAkB,EAAE;AAE/Ce,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGrB,OAAO,EAAE;AAC7B,OAAO,MAAMsB,qBAAqB,GAAGA,CAAA,KACnCpB,eAAe,CAACmB,IAAI,EAAEH,cAAc,CAAC;AACvC,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KACtCtB,kBAAkB,CAACoB,IAAI,EAAEH,cAAc,CAAC;AAE1C,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,eAAAA,CACxCC,QAAQ,EAEL;EAAA,IADHC,qBAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAE1B,IAAI,CAACF,QAAQ,EAAE;EAEf,MAAMK,UAAU,GAAGxB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACM,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EACvB,MAAMI,YAAY,GAAG,MAAM3B,MAAM,CAACuB,UAAU,CAAC;EAC7C;;EAEA;EACA,IAAI,CAACI,YAAY,CAACC,MAAM,EAAE,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGZ,QAAQ;IACvC,MAAMa,SAAS,GAAG,IAAIC,IAAI,EAAE;;IAE5B;IACA,IAAI;MACF,MAAM/B,MAAM,CAACsB,UAAU,EAAE;QACvBM,WAAW;QACXC,KAAK;QACLC,SAAS;QACT,GAAGZ;MACL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;MACd;IAAA;EAEJ;;EAEA;EACA,OAAOV,UAAU;;EAEjB;AACF,CAAC;;AAED,OAAO,MAAMW,kCAAkC,GAAG,MAAAA,CAAOJ,KAAK,EAAEK,QAAQ,KAAK;EAC3E,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;EAEzB,OAAO,MAAMvC,8BAA8B,CAACiB,IAAI,EAAEiB,KAAK,EAAEK,QAAQ,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAON,KAAK,EAAEK,QAAQ,KAAK;EACpE,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;EAEzB,OAAO,MAAMvC,8BAA8B,CAACiB,IAAI,EAAEiB,KAAK,EAAEK,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}